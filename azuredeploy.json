{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "strLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "group": "Infrastructure Configuration",
        "description": "The region to deploy the resources into. Only change if resources need to be deployed to a different location than the resource group."
      }
    },
    "strVmName": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure Configuration",
        "description": "Specify the name of the VM meeting the Caltex naming standards."
      }
    },
    "strVmSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "group": "Infrastructure Configuration",
        "description": "Specify the size of the VM required."
      }
    },
    "boolAvSetRequired": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether this server should belong to an Availability Set. Allowed values are true or false"
      }
    },
    "boolAvSetCreateNew": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether a new AV Set should be created. Allowed values are true or false"
      }
    },
    "strAvSetName": {
      "defaultValue": "None",
      "type": "string",
      "metadata": {
        "description": "Specify the name of the Availability Set, if required. Specify None if not required"
      }
    },
    "intVmOsDiskSize": {
      "defaultValue": 128,
      "type": "int",
      "metadata": {
        "description": "The size of the VM OS Disk in GB"
      }
    },
    "strOsDiskStorageType": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS",
      "metadata": {
        "group": "Infrastructure Configuration",
        "description": "The type of disk storage to use for OS Disk. Accepted values are Standard_LRS, StandardSSD_LRS or Premium_LRS"
      },
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS"
      ]
    },
    "boolAddDataDisks": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether the VM will require data disks"
      }
    },
    "objDataDisks": {
      "type": "object",
      "metadata": {
        "description": "The data disks to attach to the VM"
      }
    },
    "strPlatform": {
      "defaultValue": "Windows",
      "type": "string",
      "metadata": {
        "description": "Select the OS type to be provisioned. Default is Windows"
      },
      "allowedValues": [
        "Windows",
        "Linux"
      ]
    },
    "strImage": {
      "defaultValue": "WindowsServer",
      "type": "string",
      "metadata": {
        "description": "Select the OS image to be provisioned. Default is WindowsServer. If you select Custom, also provide publisher, offer, sku and version"
      },
      "allowedValues": [
        "WindowsServer",
        "Windows10",
        "Linux",
        "Custom"
      ]
    },
    "strPublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "The publisher of the image to use"
      }
    },
    "strOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "The offer from the selected publisher to select for image to use"
      }
    },
    "strSku": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "metadata": {
        "description": "The SKU of the selected offer and publisher to select for image to use"
      }
    },
    "strVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The version of the selected SKU to use"
      }
    },
    "boolRequirePublicIp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "group": "Network Configuration",
        "description": "Whether this server should attach a Public IP to the primary NIC or only use a Private IP"
      }
    },
    "strPublicIpAllocationType": {
      "defaultValue": "Dynamic",
      "type": "string",
      "metadata": {
        "description": "Specify whether the public IP should be Static or Dynamic"
      },
      "allowedValues": [
        "Static",
        "Dynamic"
      ]
    },
    "strPublicIpSku": {
      "defaultValue": "Standard",
      "type": "string",
      "metadata": {
        "description": "Specify the SKU of the public IP address"
      },
      "allowedValues": [
        "Standard",
        "Basic"
      ]
    },
    "strPrivateIpAllocationType": {
      "defaultValue": "Dynamic",
      "type": "string",
      "metadata": {
        "description": "Specify whether the private IP should be Static or Dynamic"
      },
      "allowedValues": [
        "Static",
        "Dynamic"
      ]
    },
    "strPrivateIpAddress": {
      "defaultValue": "None",
      "type": "string",
      "metadata": {
        "description": "A static private IP address to be used"
      }
    },
    "boolEnableAcceleratedNetworking": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "Specify whether the NIC should have Accelerated Networking enabled"
      }
    },
    "boolAttachNetworkSecurityGroup": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "Specify whether the NIC should have an NSG attached"
      }
    },
    "strNetworkSecurityGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of an NSG to attach to the NIC"
      }
    },
    "boolJoinLoadBalancer": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "Whether the NIC should belong to a Load Balancer Backend Pool. Default is false"
      }
    },
    "strLoadBalancerName": {
      "type": "string",
      "metadata": {
        "description": "Name of an Azure Load Balancer to attach to the NIC"
      }
    },
    "strLoadBalancerBackendPoolName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Backend Pool of the Load Balancer to join"
      }
    },
    "boolUseHybridUseBenefit": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether this server should use Hybrid Use Benefit licencing. Default is false"
      }
    },
    "strTimeZone": {
      "type": "string",
      "defaultValue": "AUS Eastern Standard Time",
      "metadata": {
        "description": "Timezone to use for this server. Default is AUS Eastern Standard Time"
      }
    },
    "strAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Specify the username of the Administrator account"
      }
    },
    "strAuthenticationType": {
      "defaultValue": "Password",
      "type": "string",
      "metadata": {
        "description": "Authentication type for the deployment"
      },
      "allowedValues": [
        "Password",
        "SSH-Public-Key"
      ]
    },
    "sstrAdminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "OS Admin password or SSH Key depending on value of authentication type"
      }
    },
    "strVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "group": "Network Configuration",
        "description": "Name of the Virtual Network"
      }
    },
    "strVirtualNetworkRGName": {
      "type": "string",
      "metadata": {
        "group": "Network Configuration",
        "description": "Specify the name of the Resource Group where the vNet resides"
      }
    },
    "strSubnetName": {
      "type": "string",
      "metadata": {
        "group": "Network Configuration",
        "description": "Specify the name of the Subnet"
      }
    },
    "strBootDiagnosticsStorage": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure Configuration",
        "description": "Storage Account for storing boot diagnostics data"
      }
    },
    "boolBackupRequired": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether this server should be added to a Recovery Services Vault for Azure backup"
      }
    },
    "strVaultName": {
      "type": "string",
      "metadata": {
        "description": "The Recovery Services Vault to which this server should be joined"
      }
    },
    "strVaultResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "The Resource Group containing the Recovery Services Vault to which this server should be joined"
      }
    },
    "strBackupPolicyName": {
      "type": "string",
      "metadata": {
        "description": "The Backup Policy that should be applied to this server"
      }
    },
    "boolUseDomainJoinExtension": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether this server should be domain joined"
      }
    },
    "strDomainToJoin": {
      "type": "string",
      "metadata": {
        "description": "The domain to which this server should be joined"
      }
    },
    "strOuPath": {
      "type": "string",
      "metadata": {
        "description": "The Organisational Unit into which server should be placed in the chosen domain"
      }
    },
    "strDomainJoinAccount": {
      "type": "string",
      "metadata": {
        "description": "The domain account to use for joining the domain"
      }
    },
    "sstrDomainJoinAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The domain account password for domain join"
      }
    },
    "boolUseCustomisedDSCExtension": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether this server should use a customised PowerShell DSC Agent Extension"
      }
    },
    "boolUseGenericDSCExtension": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether this server should use the Generic PowerShell DSC Agent Extension"
      }
    },
    "strArtifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Base URI of DSC artifacts required"
      }
    },
    "strDscExtensionArchiveFolder": {
      "type": "string",
      "defaultValue": "windows-powershell-dsc",
      "metadata": {
        "description": "Container or folder name that hosts the configuration archive file. Default is windows-powershell-dsc"
      }
    },
    "strDscExtensionArchiveFileName": {
      "type": "string",
      "defaultValue": "configuration.ps1.zip",
      "metadata": {
        "description": "Name of the Archive file that DSC will reference. E.g. configuration.ps1.zip is default"
      }
    },
    "strDscScript": {
      "type": "string",
      "metadata": {
        "description": "The DSC Script filename to use. e.g. configuration.ps1 is normally a default"
      }
    },
    "strDscExtensionUpdateTagVersion": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "The current extension revision number. Increment by one with each update to ensure targets refresh their DSC settings"
      }
    },
    "strDscFunction": {
      "type": "string",
      "metadata": {
        "description": "Calls function to execute within DSC configuration file"
      }
    },
    "sstrArtifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Azure blob SAS token for access to the DSC extension file. Set to empty if not required e.g. if using public GitHub repository location"
      }
    },
    "sstrStorageUserName": {
      "type": "securestring",
      "metadata": {
        "description": "The storage account where the DSC related tools downloads are saved for this environment"
      }
    },
    "sstrStoragePassword": {
      "type": "securestring",
      "metadata": {
        "description": "The access key for the storage account where the DSC related tools downloads are saved for this environment"
      }
    },
    "strLocalAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "Name of additional local user account to be added to local Administrators Group"
      }
    },
    "sstrLocalAccountUserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password of additional local user account to be added to local Administrators Group"
      }
    },
    "boolUseBGInfoExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether this server should use the BGInfo Extension"
      }
    },
    "boolUseOMSExtension": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether this server should use the OMS Agent Extension"
      }
    },
    "strOmsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "OMS Workspace ID to connect to"
      }
    },
    "sstrOmsWorkspaceKey": {
      "type": "securestring",
      "metadata": {
        "description": "Primary Key of the OMS Workspace selected"
      }
    },
    "strOmsProxyUri": {
      "type": "string",
      "metadata": {
        "description": "OMS Proxy URI if required"
      }
    },
    "boolUseAutoShutdownExtension": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether this server should use the Auto Shutdown Extension"
      }
    },
    "strShutdownStart": {
      "type": "string",
      "metadata": {
        "description": "Time to initiate shutdown in 24 hour clock notation e.g. 1900 for 7pm. Extension will use timezone parameter to correct against UTC time"
      }
    },
    "strBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "Code branch for template testing. Default is master. Supply alternate development branch name only if required"
      }
    },
    "strTagCostCentre": {
      "type": "string",
      "metadata": {
        "group": "Tags",
        "description": "A tag to apply to all resources in this deployment"
      }
    },
    "strTagApplication": {
      "type": "string",
      "metadata": {
        "group": "Tags",
        "description": "A tag to apply to all resources in this deployment"
      }
    },
    "strTagProvisionedBy": {
      "type": "string",
      "metadata": {
        "group": "Tags",
        "description": "A tag to apply to all resources in this deployment"
      }
    },
    "strTagProvisionDate": {
      "type": "string",
      "metadata": {
        "group": "Tags",
        "description": "A tag to apply to all resources in this deployment"
      }
    },
    "strTagITOwner": {
      "type": "string",
      "metadata": {
        "group": "Tags",
        "description": "A tag to apply to all resources in this deployment"
      }
    },
    "strTagEnvironment": {
      "type": "string",
      "defaultValue": "Test",
      "metadata": {
        "group": "Tags",
        "description": "A tag to apply to all resources in this deployment"
      }
    }
  },
  "variables": {
    "networkApiVersion": "2018-07-01",
    "computeApiVersion": "2018-04-01",
    "extensionApiVersion": "2015-06-15",
    "vaultApiVersion": "2016-06-01",
    "deploymentApiVersion": "2015-01-01",
    "nestedDeploymentApiVersion": "2017-05-10",
    "autoShutdownApiVersion": "2018-10-01",
    "mainResourceGroup": "[resourceGroup().name]",
    "true": true,
    "templateLink": "[concat('https://raw.githubusercontent.com/jvta/AzureVM/',parameters('strBranch'))]",
    "nicName": "[concat(parameters('strVmName'),'-nic1')]",
    "pipName": "[concat(parameters('strVmName'),'-PIP')]",
    "backupFabric": "Azure",
    "protectionContainer": "[concat('iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', parameters('strVmName'))]",
    "protectedItem": "[concat('vm;iaasvmcontainerv2;', resourceGroup().name, ';', parameters('strVmName'))]",
    "emptyString": "",
    "objTags": {
      "CostCentre": "[parameters('strTagCostCentre')]",
      "Application": "[parameters('strTagApplication')]",
      "ProvisionedBy": "[parameters('strTagProvisionedBy')]",
      "ProvisionDate": "[parameters('strTagProvisionDate')]",
      "ITOwner": "[parameters('strTagITOwner')]",
      "Environment": "[parameters('strTagEnvironment')]"
    }
  },
  "resources": [
    {
      "condition": "[and(parameters('boolAvSetCreateNew'),parameters('boolAvSetRequired'))]",
      "type": "Microsoft.Resources/deployments",
      "name": "provisionAvSet",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('templateLink'),'/','LinkedTemplates/provisionAVSet.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "strLocation": {
            "value": "[parameters('strLocation')]"
          },
          "strApiVersion": {
            "value": "[variables('computeApiVersion')]"
          },
          "strAvSetName": {
            "value": "[parameters('strAvSetName')]"
          },
          "objTags": {
            "value": "[variables('objTags')]"
          }
        }
      }
    },
    {
      "condition": "[and(parameters('boolRequirePublicIp'),variables('true'))]",
      "type": "Microsoft.Resources/deployments",
      "name": "provisionPublicIp",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('templateLink'),'/','LinkedTemplates/provisionPIP.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "strLocation": {
            "value": "[parameters('strLocation')]"
          },
          "strApiVersion": {
            "value": "[variables('networkApiVersion')]"
          },
          "strName": {
            "value": "[variables('pipName')]"
          },
          "strPublicIpAllocationType": {
            "value": "[parameters('strPublicIpAllocationType')]"
          },
          "strPublicIpSku": {
            "value": "[parameters('strPublicIpSku')]"
          },
          "objTags": {
            "value": "[variables('objTags')]"
          }
        }
      }
    },
    {
      "name": "provisionNetworkInterface",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "Microsoft.Resources/deployments/provisionPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('templateLink'),'/LinkedTemplates/','provisionNIC',if(parameters('boolRequirePublicIp'),'Public','Private'),'.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "strLocation": {
            "value": "[parameters('strLocation')]"
          },
          "objTags": {
            "value": "[variables('objTags')]"
          },
          "strPipId": {
            "value": "[if(parameters('boolRequirePublicIp'), reference('provisionPublicIp').outputs.resourceID.value, 'None')]"
          },
          "strNicName": {
            "value": "[variables('nicName')]"
          },
          "strNetworkApiVersion": {
            "value": "[variables('networkApiVersion')]"
          },
          "strVirtualNetworkName": {
            "value": "[parameters('strVirtualNetworkName')]"
          },
          "strVirtualNetworkRGName": {
            "value": "[parameters('strVirtualNetworkRGName')]"
          },
          "strSubnetName": {
            "value": "[parameters('strSubnetName')]"
          },
          "strPrivateIpAddress": {
            "value": "[parameters('strPrivateIpAddress')]"
          },
          "strPrivateIpAllocationType": {
            "value": "[parameters('strPrivateIpAllocationType')]"
          },
          "boolEnableAcceleratedNetworking": {
            "value": "[parameters('boolEnableAcceleratedNetworking')]"
          },
          "boolAttachNetworkSecurityGroup": {
            "value": "[parameters('boolAttachNetworkSecurityGroup')]"
          },
          "strNetworkSecurityGroup": {
            "value": "[parameters('strNetworkSecurityGroup')]"
          },
          "boolJoinLoadBalancer": {
            "value": "[parameters('boolJoinLoadBalancer')]"
          },
          "strLoadBalancerName": {
            "value": "[parameters('strLoadBalancerName')]"
          },
          "strLoadBalancerBackendPoolName": {
            "value": "[parameters('strLoadBalancerBackendPoolName')]"
          }
        }
      }
    },
    {
      "name": "provisionCompute",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "Microsoft.Resources/deployments/ProvisionNetworkInterface",
        "Microsoft.Resources/deployments/ProvisionAvSet"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('templateLink'),'/LinkedTemplates/provisionVM',if(parameters('boolAddDataDisks'),'WithDataDisks','NoDataDisks'),'.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "strLocation": {
            "value": "[parameters('strLocation')]"
          },
          "strVmName": {
            "value": "[parameters('strVmName')]"
          },
          "strVmSize": {
            "value": "[parameters('strVmSize')]"
          },
          "objTags": {
            "value": "[variables('objTags')]"
          },
          "strNicName": {
            "value": "[variables('nicName')]"
          },
          "strComputeApiVersion": {
            "value": "[variables('computeApiVersion')]"
          },
          "strExtensionApiVersion": {
            "value": "[variables('extensionApiVersion')]"
          },
          "strAdminUsername": {
            "value": "[parameters('strAdminUsername')]"
          },
          "boolAvSetRequired": {
            "value": "[parameters('boolAvSetRequired')]"
          },
          "strAvSetName": {
            "value": "[if(parameters('boolAvSetRequired'), parameters('strAvSetName'), variables('emptyString'))]"
          },
          "intVmOsDiskSize": {
            "value": "[parameters('intVmOsDiskSize')]"
          },
          "strOsDiskStorageType": {
            "value": "[parameters('strOsDiskStorageType')]"
          },
          "objDataDisks": {
            "value": "[parameters('objDataDisks')]"
          },
          "strPlatform": {
            "value": "[parameters('strPlatform')]"
          },
          "strImage": {
            "value": "[parameters('strImage')]"
          },
          "strPublisher": {
            "value": "[parameters('strPublisher')]"
          },
          "strOffer": {
            "value": "[parameters('strOffer')]"
          },
          "strSku": {
            "value": "[parameters('strSku')]"
          },
          "strVersion": {
            "value": "[parameters('strVersion')]"
          },
          "strTimeZone": {
            "value": "[parameters('strTimeZone')]"
          },
          "boolUseHybridUseBenefit": {
            "value": "[parameters('boolUseHybridUseBenefit')]"
          },
          "strAuthenticationType": {
            "value": "[parameters('strAuthenticationType')]"
          },
          "sstrAdminPasswordOrKey": {
            "value": "[parameters('sstrAdminPasswordOrKey')]"
          },
          "strBootDiagnosticsStorage": {
            "value": "[parameters('strBootDiagnosticsStorage')]"
          },
          "boolUseDomainJoinExtension": {
            "value": "[parameters('boolUseDomainJoinExtension')]"
          },
          "strDomainToJoin": {
            "value": "[parameters('strDomainToJoin')]"
          },
          "strOuPath": {
            "value": "[parameters('strOuPath')]"
          },
          "strDomainJoinAccount": {
            "value": "[parameters('strDomainJoinAccount')]"
          },
          "sstrDomainJoinAccountPassword": {
            "value": "[parameters('sstrDomainJoinAccountPassword')]"
          },
          "boolUseCustomisedDSCExtension": {
            "value": "[parameters('boolUseCustomisedDSCExtension')]"
          },
          "boolUseGenericDSCExtension": {
            "value": "[parameters('boolUseGenericDSCExtension')]"
          },
          "strArtifactsLocation": {
            "value": "[parameters('strArtifactsLocation')]"
          },
          "strDscExtensionArchiveFolder": {
            "value": "[parameters('strDscExtensionArchiveFolder')]"
          },
          "strDscExtensionArchiveFileName": {
            "value": "[parameters('strDscExtensionArchiveFileName')]"
          },
          "strDscScript": {
            "value": "[parameters('strDscScript')]"
          },
          "strDscExtensionUpdateTagVersion": {
            "value": "[parameters('strDscExtensionUpdateTagVersion')]"
          },
          "strDscFunction": {
            "value": "[parameters('strDscFunction')]"
          },
          "sstrArtifactsLocationSasToken": {
            "value": "[parameters('sstrArtifactsLocationSasToken')]"
          },
          "sstrStorageUserName": {
            "value": "[parameters('sstrStorageUserName')]"
          },
          "sstrStoragePassword": {
            "value": "[parameters('sstrStoragePassword')]"
          },
          "strLocalAccountUserName": {
            "value": "[parameters('strLocalAccountUserName')]"
          },
          "sstrLocalAccountUserPassword": {
            "value": "[parameters('sstrLocalAccountUserPassword')]"
          },
          "boolUseBGInfoExtension": {
            "value": "[parameters('boolUseBGInfoExtension')]"
          },
          "boolUseOMSExtension": {
            "value": "[parameters('boolUseOMSExtension')]"
          },
          "strOmsWorkspaceId": {
            "value": "[parameters('strOmsWorkspaceId')]"
          },
          "sstrOmsWorkspaceKey": {
            "value": "[parameters('sstrOmsWorkspaceKey')]"
          },
          "strOmsProxyUri": {
            "value": "[parameters('strOmsProxyUri')]"
          },
          "boolUseAutoShutdownExtension": {
            "value": "[parameters('boolUseAutoShutdownExtension')]"
          },
          "strAutoShutdownApiVersion": {
            "value": "[variables('autoShutdownApiVersion')]"
          },
          "strShutdownStart": {
            "value": "[parameters('strShutdownStart')]"
          }
        }
      }
    },
    {
      "condition": "[and(parameters('boolBackupRequired'),variables('true'))]",
      "name": "nestedBackupDeployment",
      "apiVersion": "[variables('nestedDeploymentApiVersion')]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "Microsoft.Resources/deployments/provisionCompute"
      ],
      "resourceGroup": "[parameters('strVaultResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
              "name": "[concat(parameters('strVaultName'), '/', variables('backupFabric'), '/', variables('protectionContainer'), '/', variables('protectedItem'))]",
              "apiVersion": "[variables('vaultApiVersion')]",
              "location": "[parameters('strLocation')]",
              "properties": {
                "protectedItemType": "Microsoft.Compute/virtualMachines",
                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('strVaultName'), parameters('strBackupPolicyName'))]",
                "sourceResourceId": "[resourceId(variables('mainResourceGroup'),'Microsoft.Compute/virtualMachines/', parameters('strVmName'))]"
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {}
}